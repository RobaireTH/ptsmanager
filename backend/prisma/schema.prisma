// Prisma schema (Python Prisma) for SQLite
// Enhanced with Attendance model and proper indexing

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

datasource db {
  provider = "sqlite"
  url      = "file:./ptsmanager.db"
}

model User {
  id                        Int       @id @default(autoincrement())
  name                      String
  email                     String    @unique
  role                      String
  password_hash             String
  status                    String    @default("active")
  email_verified            Boolean   @default(false)
  email_verification_token  String?
  password_reset_token      String?
  password_reset_expires_at String?
  refresh_token_hash        String?
  refresh_token_expires_at  String?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt

  // Relationships
  parent           Parent?
  teacher          Teacher?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Indexes
  @@index([email])
  @@index([role])
  @@index([status])
}

model Parent {
  id                  Int      @id @default(autoincrement())
  user_id             Int      @unique
  phone               String?
  profile_picture_url String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  students Student[]

  // Indexes
  @@index([user_id])
}

model Teacher {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  phone      String?
  subjects   String? // comma separated for simplicity
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  classes    ClassModel[]
  results    Result[]     @relation("TeacherResults")
  attendance Attendance[] @relation("TeacherAttendance")

  // Indexes
  @@index([user_id])
  @@index([status])
}

model ClassModel {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  teacher_id        Int?
  room              String?
  subjects          String? // comma separated for simplicity
  expected_students Int      @default(0)
  status            String   @default("active")
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relationships
  teacher    Teacher?     @relation(fields: [teacher_id], references: [id], onDelete: SetNull)
  students   Student[]
  results    Result[]
  attendance Attendance[] @relation("ClassAttendance")

  // Indexes
  @@index([teacher_id])
  @@index([name])
  @@index([status])
  @@map("classes")
}

model Student {
  id         Int      @id @default(autoincrement())
  name       String
  class_id   Int?
  roll_no    String?  @unique
  parent_id  Int?
  email      String?  @unique
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relationships
  parent     Parent?      @relation(fields: [parent_id], references: [id], onDelete: SetNull)
  classModel ClassModel?  @relation(fields: [class_id], references: [id], onDelete: SetNull)
  results    Result[]
  attendance Attendance[] @relation("StudentAttendance")

  // Indexes
  @@index([parent_id])
  @@index([class_id])
  @@index([roll_no])
  @@index([email])
  @@index([status])
  @@index([name])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        String? // ISO date string
  time        String? // ISO time string
  type        String   @default("meeting")
  status      String   @default("scheduled")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Indexes
  @@index([date])
  @@index([type])
  @@index([status])
}

model Message {
  id             Int      @id @default(autoincrement())
  subject        String
  body           String?
  sender_id      Int?
  recipient_id   Int?
  recipient_role String?
  created_at     String? // ISO timestamp
  read_at        String? // ISO timestamp
  priority       String   @default("normal") // normal, high, urgent
  message_type   String   @default("general") // general, announcement, alert

  // Relationships
  sender    User? @relation("SentMessages", fields: [sender_id], references: [id], onDelete: SetNull)
  recipient User? @relation("ReceivedMessages", fields: [recipient_id], references: [id], onDelete: SetNull)

  // Indexes
  @@index([sender_id])
  @@index([recipient_id])
  @@index([recipient_role])
  @@index([read_at])
  @@index([created_at])
}

model Result {
  id         Int      @id @default(autoincrement())
  student_id Int
  class_id   Int?
  teacher_id Int
  subject    String
  term       String // 1st-term, 2nd-term, 3rd-term
  score      Int
  grade      String
  date       String? // ISO date string
  comments   String?
  created_at String? // ISO timestamp
  updated_at DateTime @updatedAt

  // Relationships
  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  classModel ClassModel?  @relation(fields: [class_id], references: [id], onDelete: SetNull)
  teacher Teacher @relation("TeacherResults", fields: [teacher_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([student_id])
  @@index([class_id])
  @@index([teacher_id])
  @@index([term])
  @@index([subject])
  @@index([date])
  @@index([student_id, term]) // Composite index for common queries
  @@index([class_id, term]) // Composite index for class-based queries
}

model Attendance {
  id         Int      @id @default(autoincrement())
  student_id Int
  class_id   Int?
  teacher_id Int
  date       String // ISO date string (YYYY-MM-DD)
  status     String // present, absent, late, excused
  notes      String?
  created_at String? // ISO timestamp
  updated_at DateTime @updatedAt

  // Relationships
  student Student @relation("StudentAttendance", fields: [student_id], references: [id], onDelete: Cascade)
  classModel ClassModel?  @relation("ClassAttendance", fields: [class_id], references: [id], onDelete: SetNull)
  teacher Teacher @relation("TeacherAttendance", fields: [teacher_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([student_id])
  @@index([class_id])
  @@index([teacher_id])
  @@index([date])
  @@index([status])
  @@index([student_id, date]) // Composite index for student attendance history
  @@index([class_id, date]) // Composite index for class attendance by date
  @@index([date, status]) // Composite index for daily attendance reports

  // Unique constraint to prevent duplicate attendance records for same student on same date
  @@unique([student_id, date])
}
